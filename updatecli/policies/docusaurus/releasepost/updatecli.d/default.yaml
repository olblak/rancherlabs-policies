---
# Helpers
# {{ $GitHubUser := env ""}}
# {{ $GitHubRepositoryList := env "GITHUB_REPOSITORY" | split "/"}}
# {{ $GitHubPAT := env "GITHUB_TOKEN"}}
# {{ $GitHubUsername := env "GITHUB_ACTOR"}}

name: 'docs: synchronize {{ .project }} release note'
pipelineid: '{{ .pipelineid }}/{{ .project }}'

# {{ if or (.scm.enabled) (env "GITHUB_REPOSITORY") }}
scms:
  default:
    kind: 'github'
    spec:
      owner: '{{ default .scm.default.owner $GitHubRepositoryList._0 }}'
      repository: '{{ default .scm.default.repository $GitHubRepositoryList._1 }}'
      branch: '{{ .scm.default.branch }}'
      user: '{{ .scm.default.user }}'
      email: '{{ .scm.default.email }}'
      username: '{{ default .scm.default.username $GitHubUsername }}'
      token: '{{ default .scm.default.token $GitHubPAT }}'

# actions defines what to do when a target with the same scmid is modified.
actions:
  default:
    kind: 'github/pullrequest'
    scmid: 'default'
    spec:
      automerge: '{{ .automerge }}'
      mergemethod: "squash"
      labels:
        - 'dependencies'
# {{ end }}
#
conditions:
  binary:
    name: 'releasepost is installed'
    kind: 'shell'
    spec:
      command: 'releasepost --help'
      environments:
        - name: 'PATH'
      changedif:
        kind: 'exitcode'
        spec:
          success: 0

targets:
  default:
    name: 'doc: synchronize {{ .project }} release note'
    kind: 'shell'
# {{ if or (.scm.enabled) (env "GITHUB_REPOSITORY") }}
    scmid: 'default'
# {{ end }}
    dependson:
      - 'config'
    spec:
      command: 'releasepost --dry-run="$DRY_RUN" --config {{ .config }} --clean'
      environments:
        - name: 'GITHUB_TOKEN'
        - name: 'PATH'
      changedif:
        kind: 'exitcode'
        spec:
          warning: 0
          success: 1
          failure: 2

  config:
    name: 'docs: update releasepost configuration file {{ .config }}'
    kind: 'shell'
# {{ if or (.scm.enabled) (env "GITHUB_REPOSITORY") }}
    scmid: 'default'
# {{ end }}
    spec:
      changedif:
        kind: 'file/checksum'
        spec:
          files:
            - '{{ .config }}'
      # {{ $AppGitHubRepositoryList := .repository | split "/"}}
      command: |
        RELEASEPOST_CONFIG="{{ .config }}"

        GITHUB_OWNER="{{ $AppGitHubRepositoryList._0 }}"
        GITHUB_REPOSITORY="{{ $AppGitHubRepositoryList._1 }}"
        ## The following two variables are a trick to avoid the go template interpolation
        ## done by Updatecli
        O="{""{"
        C="}""}"
        
        sanitizeVersion () {
          local version=$1
          version=${version##"]"}
          version=${version##"["}
          version=${version##"  \""}
          version=${version%\"*}
        
          echo "$version"
        }
        
        echo "Ensure $RELEASEPOST_CONFIG is up to date for version:"
        echo "changelogs:" > $RELEASEPOST_CONFIG
        
        while IFS= read -r line
        do
          version=$(sanitizeVersion "$line")
          if [ -n "$version" ]; then
            {
              echo "  - kind: github"
              echo "    dir: versioned_docs/version-$version/changelogs"
              echo "    formats:"
              echo "      - extension: markdown"
              echo "        frontmatters: |"
              echo "          ---"
              echo "          title: \"$O .Changelog.Name $C\""
              echo "          date: \"$O .Changelog.PublishedAt $C\""
              echo "          ---"
              echo "        indexfilename: index"
              echo "        indexfrontmatters: |"
              echo "          ---"
              echo "          title: \"$version Changelogs\""
              echo "          ---"
              echo "        indexfiletemplate: |"
              echo "          $O .FrontMatters $C"
              echo "          $O range \$pos, \$release := .Changelogs $C"
              echo "          * [$O \$release.Name$C](changelogs/$O \$release.Tag $C.md) $O if (eq \$pos 0) $C(latest)$O end$C"
              echo "          $O end $C"
              echo "    spec:"
              echo "      owner: $GITHUB_OWNER"
              echo "      repository: $GITHUB_REPOSITORY"
              echo "      versionfilter:"
              echo "        kind: semver"
              echo "        pattern: \"~$version\""
              echo ""
            } >> $RELEASEPOST_CONFIG
            echo "  * $version"
        
          fi
        done < versions.json

