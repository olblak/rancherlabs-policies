name: "Bump {{ .project }} version in documentation"
pipelineid: "docusaurus/versioning"

actions:
  default:
    kind: "github/pullrequest"
    scmid: "website"
    spec:
      automerge: {{.automerge}}
      mergemethod: "squash"
      labels:
        - "chore"

scms:
  website:
    kind: "github"
    spec:
      user: '{{ .scm.default.user }}'
      email: '{{ .scm.default.email }}' 
      # {{ $GitHubRepositoryList := env "GITHUB_REPOSITORY" | split "/"}}
      owner: '{{ default .scm.default.owner $GitHubRepositoryList._0 }}' 
      repository: '{{ default .scm.default.repository $GitHubRepositoryList._1 }}' 
      # {{ $GitHubPAT := env "GITHUB_TOKEN"}}
      token: '{{ default .scm.default.token $GitHubPAT }}' 
      # {{ $GitHubUsername := env "GITHUB_ACTOR"}}}
      username: '{{ default .scm.default.username $GitHubUsername }}' 
      branch: '{{ default .scm.default.branch }}' 

conditions:
  yarn:
    name: "Check if yarn is installed"
    kind: "shell"
    disablesourceinput: true
    spec:
      environments:
        - name: "PATH"
      changedif:
        kind: "exitcode"
        spec:
          failure: 1
          success: 0
          warning: 1
      command: |+
        #!/bin/sh
        yarn --help > /dev/null
      
sources:
  version:
    name: "Get latest {{ .project }} version"
    kind: githubrelease
    spec:
      # {{ $AppGitHubRepositoryList := .repository | split "/"}}
      owner: '{{ $AppGitHubRepositoryList._0 }}' 
      repository: '{{ $AppGitHubRepositoryList._1 }}' 
      token: '{{ default .scm.default.token $GitHubPAT }}'
      username: '{{ default .scm.default.username $GitHubUsername }}' 
      versionfilter:
        kind: "semver"
        # We want to ignore pre-release version
        # According the library documentation used by updatecli
        # https://github.com/Masterminds/semver#working-with-prerelease-versions
        # the following rule, should do the trick
        pattern: ">0.1"
    transformers:
        - trimprefix: "v"
        - findsubmatch:
            # Remove once if we decide to only keep major and minor version such as 0.7
            pattern: '^(\d*).(\d*)'
            # pattern: '^(\d*).(\d*).(\d*)'
            captureindex: 0
        # Uncomment if we decide to only version based on minor version
        # so we could have 0.7.x
        #- addSuffix: ".x"

targets:
  # Required yarn to be installed
  docusaurus:
    kind: "shell"
    name: "Set latest docusaurus version"
    scmid: "website"
    disablesourceinput: true
    spec:
      # {{ .project }} source value is automatically added to the command as a parameter
      environments:
        - name: "PATH"
      # The following script is designed to be working on Linux environment
      command: |+
        #!/bin/sh
        # Testing that we can run yarn command from the GitHub Runner
        yarn --help > /dev/null
        VERSION='{{ source "version"}}'
        if [ -z "$VERSION" ]
        then
          echo "Empty version provided"
        fi
        if [ ! -d "versioned_docs/version-$VERSION" ]
        then
          # DRY_RUN is the environment variable used by Updatecli
          # to know if Updatecli is execute in DRY_RUN mode or APPLY mode
          if test "$DRY_RUN" == "true"
          then
            echo "**DRY_RUN** new version $VERSION will be created"
          exit 0
          fi
          # Install dependencies to tmp directory
          yarn install --frozen-lockfile
          yarn run docusaurus docs:version "$VERSION"
        fi
